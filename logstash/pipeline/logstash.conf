input {

  beats {
		port => 5044
	}

  # file {
  #   # path => "/usr/share/logstash/data/initial_data.csv"
  #   path => "/usr/share/logstash/data/system.log"
  #   start_position => "beginning"
  #   sincedb_path => "/dev/null"
  # }
}

# case import csv file
# filter { 
#   csv {
#     skip_header => true
#     columns => ["plant_code", "trip_type_code", "trip_type", "transport_type_code", "transport_type", "truck_class_code", "truck_class", "customer_class", "origin_site_code", "origin_site", "destination_site_code", "destination_site", "product_group_code", "product_group", "effective_date", "cal_method", "min_rate", "max_rate", "receive_amount", "payment_amount", "cancel_flag", "user_create", "create_date", "last_user_id", "last_update_date"]
#     separator => ","
#   }
#   mutate {
#     add_field => {
#       "range_rate" => "%{min_rate}-%{max_rate}"
#     }
#     convert => {
#       "receive_amount" => "float"
#       "payment_amount" => "float"
#     }
#     remove_field => ["trip_type_code", "transport_type_code", "truck_class_code", "origin_site_code", "destination_site_code", "product_group_code", "min_rate", "max_rate"]
#   }
#   date {
#     match => ["create_date", "dd-MMM-yy"] # ex: 01-Mar-11
#     target => "create_date_format" # convert create_date to create_date_format, value is date time standard format ex: 2011-03-01T00:00:00.000Z
#     add_field => {
#       "create_date_str_format" => ""
#     }
#   }
#   ruby {
#     code => '
#       t = event.get("create_date_format")
#       event.set("create_date_str_format", Time.at(t.to_f).strftime("%d/%m/%Y")) # new string format ex: 01/03/2011
#     '
#   }

#   if ![receive_amount] or [receive_amount] < 2000 {
#     drop {}
#   }
# }

# case import log file
filter { 
  grok {
    match => { "message" => [
      "\[%{DAY:day} %{MONTH:month} %{MONTHDAY:monthday} %{TIME:time} %{YEAR:year}\] \[%{LOGLEVEL:type}\] %{NOTSPACE:function} %{GREEDYDATA:info}"
    ] }
  }
  mutate {
    add_field => {
      "timestamp" => "%{monthday} %{month} %{year} %{time}"
    }
  }
  date {
    match => [ "timestamp", "dd MMM yyyy HH:mm:ss" ]
    target => "@timestamp"
    locale => "en"
    timezone => "UTC"
    remove_field => ["timestamp", "day", "month", "monthday", "time", "year"]
  }
}

output {
  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    index => "test"
    manage_template => true  
    template => "/usr/share/logstash/data/logstash.template.json"
    template_overwrite => true
  }
}
